{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 11}, "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture\n    def mock_nft_agent():\n        \"\"\"Create a mock NFT agent with predefined behavior\"\"\"\n        agent = Mock(spec=NFTAgent)\n    \n        # Mock NFTs\n        agent.nfts = {\n            'nft1': NFT(id='nft1', strategy_id='strategy1', governance_tokens=1000.0, owner='owner1',\n                        performance_metrics={'total_profit': 100.0}),\n            'nft2': NFT(id='nft2', strategy_id='strategy1', governance_tokens=1500.0, owner='owner2',\n                        performance_metrics={'total_profit': 150.0})\n        }\n    \n        # Mock strategy runner\n>       agent.strategy_runner.strategies = {\n            'strategy1': ['agent1', 'agent2'],\n            'strategy2': ['agent3']\n        }\n\ntests\\test_core_functions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Mock spec='NFTAgent' id='2523164616592'>, name = 'strategy_runner'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'strategy_runner'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:653: AttributeError\n", "test_name": "test_run_trade_success", "rerun": "0"}, "1": {"status": "ERROR", "message": "@pytest.fixture\n    def mock_nft_agent():\n        \"\"\"Create a mock NFT agent with predefined behavior\"\"\"\n        agent = Mock(spec=NFTAgent)\n    \n        # Mock NFTs\n        agent.nfts = {\n            'nft1': NFT(id='nft1', strategy_id='strategy1', governance_tokens=1000.0, owner='owner1',\n                        performance_metrics={'total_profit': 100.0}),\n            'nft2': NFT(id='nft2', strategy_id='strategy1', governance_tokens=1500.0, owner='owner2',\n                        performance_metrics={'total_profit': 150.0})\n        }\n    \n        # Mock strategy runner\n>       agent.strategy_runner.strategies = {\n            'strategy1': ['agent1', 'agent2'],\n            'strategy2': ['agent3']\n        }\n\ntests\\test_core_functions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Mock spec='NFTAgent' id='2523164173904'>, name = 'strategy_runner'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'strategy_runner'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:653: AttributeError\n", "test_name": "test_run_trade_failure", "rerun": "0"}, "2": {"status": "ERROR", "message": "@pytest.fixture\n    def mock_nft_agent():\n        \"\"\"Create a mock NFT agent with predefined behavior\"\"\"\n        agent = Mock(spec=NFTAgent)\n    \n        # Mock NFTs\n        agent.nfts = {\n            'nft1': NFT(id='nft1', strategy_id='strategy1', governance_tokens=1000.0, owner='owner1',\n                        performance_metrics={'total_profit': 100.0}),\n            'nft2': NFT(id='nft2', strategy_id='strategy1', governance_tokens=1500.0, owner='owner2',\n                        performance_metrics={'total_profit': 150.0})\n        }\n    \n        # Mock strategy runner\n>       agent.strategy_runner.strategies = {\n            'strategy1': ['agent1', 'agent2'],\n            'strategy2': ['agent3']\n        }\n\ntests\\test_core_functions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Mock spec='NFTAgent' id='2523163878928'>, name = 'strategy_runner'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'strategy_runner'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:653: AttributeError\n", "test_name": "test_get_trade_history", "rerun": "0"}, "3": {"status": "ERROR", "message": "@pytest.fixture\n    def mock_nft_agent():\n        \"\"\"Create a mock NFT agent with predefined behavior\"\"\"\n        agent = Mock(spec=NFTAgent)\n    \n        # Mock NFTs\n        agent.nfts = {\n            'nft1': NFT(id='nft1', strategy_id='strategy1', governance_tokens=1000.0, owner='owner1',\n                        performance_metrics={'total_profit': 100.0}),\n            'nft2': NFT(id='nft2', strategy_id='strategy1', governance_tokens=1500.0, owner='owner2',\n                        performance_metrics={'total_profit': 150.0})\n        }\n    \n        # Mock strategy runner\n>       agent.strategy_runner.strategies = {\n            'strategy1': ['agent1', 'agent2'],\n            'strategy2': ['agent3']\n        }\n\ntests\\test_core_functions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Mock spec='NFTAgent' id='2523164036368'>, name = 'strategy_runner'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'strategy_runner'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:653: AttributeError\n", "test_name": "test_get_market_price_available", "rerun": "0"}, "4": {"status": "ERROR", "message": "@pytest.fixture\n    def mock_nft_agent():\n        \"\"\"Create a mock NFT agent with predefined behavior\"\"\"\n        agent = Mock(spec=NFTAgent)\n    \n        # Mock NFTs\n        agent.nfts = {\n            'nft1': NFT(id='nft1', strategy_id='strategy1', governance_tokens=1000.0, owner='owner1',\n                        performance_metrics={'total_profit': 100.0}),\n            'nft2': NFT(id='nft2', strategy_id='strategy1', governance_tokens=1500.0, owner='owner2',\n                        performance_metrics={'total_profit': 150.0})\n        }\n    \n        # Mock strategy runner\n>       agent.strategy_runner.strategies = {\n            'strategy1': ['agent1', 'agent2'],\n            'strategy2': ['agent3']\n        }\n\ntests\\test_core_functions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Mock spec='NFTAgent' id='2523163987280'>, name = 'strategy_runner'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'strategy_runner'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:653: AttributeError\n", "test_name": "test_get_market_price_unavailable", "rerun": "0"}, "5": {"status": "ERROR", "message": "@pytest.fixture\n    def mock_nft_agent():\n        \"\"\"Create a mock NFT agent with predefined behavior\"\"\"\n        agent = Mock(spec=NFTAgent)\n    \n        # Mock NFTs\n        agent.nfts = {\n            'nft1': NFT(id='nft1', strategy_id='strategy1', governance_tokens=1000.0, owner='owner1',\n                        performance_metrics={'total_profit': 100.0}),\n            'nft2': NFT(id='nft2', strategy_id='strategy1', governance_tokens=1500.0, owner='owner2',\n                        performance_metrics={'total_profit': 150.0})\n        }\n    \n        # Mock strategy runner\n>       agent.strategy_runner.strategies = {\n            'strategy1': ['agent1', 'agent2'],\n            'strategy2': ['agent3']\n        }\n\ntests\\test_core_functions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Mock spec='NFTAgent' id='2523163924880'>, name = 'strategy_runner'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'strategy_runner'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:653: AttributeError\n", "test_name": "test_get_strategy_status", "rerun": "0"}, "6": {"status": "ERROR", "message": "@pytest.fixture\n    def mock_nft_agent():\n        \"\"\"Create a mock NFT agent with predefined behavior\"\"\"\n        agent = Mock(spec=NFTAgent)\n    \n        # Mock NFTs\n        agent.nfts = {\n            'nft1': NFT(id='nft1', strategy_id='strategy1', governance_tokens=1000.0, owner='owner1',\n                        performance_metrics={'total_profit': 100.0}),\n            'nft2': NFT(id='nft2', strategy_id='strategy1', governance_tokens=1500.0, owner='owner2',\n                        performance_metrics={'total_profit': 150.0})\n        }\n    \n        # Mock strategy runner\n>       agent.strategy_runner.strategies = {\n            'strategy1': ['agent1', 'agent2'],\n            'strategy2': ['agent3']\n        }\n\ntests\\test_core_functions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Mock spec='NFTAgent' id='2523163788304'>, name = 'strategy_runner'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'strategy_runner'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:653: AttributeError\n", "test_name": "test_distribute_profits", "rerun": "0"}, "7": {"status": "ERROR", "message": "@pytest.fixture\n    def mock_nft_agent():\n        \"\"\"Create a mock NFT agent with predefined behavior\"\"\"\n        agent = Mock(spec=NFTAgent)\n    \n        # Mock NFTs\n        agent.nfts = {\n            'nft1': NFT(id='nft1', strategy_id='strategy1', governance_tokens=1000.0, owner='owner1',\n                        performance_metrics={'total_profit': 100.0}),\n            'nft2': NFT(id='nft2', strategy_id='strategy1', governance_tokens=1500.0, owner='owner2',\n                        performance_metrics={'total_profit': 150.0})\n        }\n    \n        # Mock strategy runner\n>       agent.strategy_runner.strategies = {\n            'strategy1': ['agent1', 'agent2'],\n            'strategy2': ['agent3']\n        }\n\ntests\\test_core_functions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Mock spec='NFTAgent' id='2523164126288'>, name = 'strategy_runner'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'strategy_runner'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:653: AttributeError\n", "test_name": "test_get_holder_earnings", "rerun": "0"}, "8": {"status": "ERROR", "message": "@pytest.fixture\n    def mock_nft_agent():\n        \"\"\"Create a mock NFT agent with predefined behavior\"\"\"\n        agent = Mock(spec=NFTAgent)\n    \n        # Mock NFTs\n        agent.nfts = {\n            'nft1': NFT(id='nft1', strategy_id='strategy1', governance_tokens=1000.0, owner='owner1',\n                        performance_metrics={'total_profit': 100.0}),\n            'nft2': NFT(id='nft2', strategy_id='strategy1', governance_tokens=1500.0, owner='owner2',\n                        performance_metrics={'total_profit': 150.0})\n        }\n    \n        # Mock strategy runner\n>       agent.strategy_runner.strategies = {\n            'strategy1': ['agent1', 'agent2'],\n            'strategy2': ['agent3']\n        }\n\ntests\\test_core_functions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Mock spec='NFTAgent' id='2523163743824'>, name = 'strategy_runner'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'strategy_runner'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:653: AttributeError\n", "test_name": "test_create_governance_proposal_success", "rerun": "0"}, "9": {"status": "ERROR", "message": "@pytest.fixture\n    def mock_nft_agent():\n        \"\"\"Create a mock NFT agent with predefined behavior\"\"\"\n        agent = Mock(spec=NFTAgent)\n    \n        # Mock NFTs\n        agent.nfts = {\n            'nft1': NFT(id='nft1', strategy_id='strategy1', governance_tokens=1000.0, owner='owner1',\n                        performance_metrics={'total_profit': 100.0}),\n            'nft2': NFT(id='nft2', strategy_id='strategy1', governance_tokens=1500.0, owner='owner2',\n                        performance_metrics={'total_profit': 150.0})\n        }\n    \n        # Mock strategy runner\n>       agent.strategy_runner.strategies = {\n            'strategy1': ['agent1', 'agent2'],\n            'strategy2': ['agent3']\n        }\n\ntests\\test_core_functions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Mock spec='NFTAgent' id='2523158324624'>, name = 'strategy_runner'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'strategy_runner'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:653: AttributeError\n", "test_name": "test_create_governance_proposal_invalid", "rerun": "0"}, "10": {"status": "ERROR", "message": "@pytest.fixture\n    def mock_nft_agent():\n        \"\"\"Create a mock NFT agent with predefined behavior\"\"\"\n        agent = Mock(spec=NFTAgent)\n    \n        # Mock NFTs\n        agent.nfts = {\n            'nft1': NFT(id='nft1', strategy_id='strategy1', governance_tokens=1000.0, owner='owner1',\n                        performance_metrics={'total_profit': 100.0}),\n            'nft2': NFT(id='nft2', strategy_id='strategy1', governance_tokens=1500.0, owner='owner2',\n                        performance_metrics={'total_profit': 150.0})\n        }\n    \n        # Mock strategy runner\n>       agent.strategy_runner.strategies = {\n            'strategy1': ['agent1', 'agent2'],\n            'strategy2': ['agent3']\n        }\n\ntests\\test_core_functions.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Mock spec='NFTAgent' id='2523163633680'>, name = 'strategy_runner'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'strategy_runner'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:653: AttributeError\n", "test_name": "test_get_governance_proposals", "rerun": "0"}}, "suite_name": "tests/test_core_functions.py"}}}, "date": "March 25, 2025", "start_time": 1742932646.4846802, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "11", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "11"}