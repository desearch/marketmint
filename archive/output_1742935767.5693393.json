{"content": {"suites": {"0": {"status": {"total_pass": 2, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 2, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_create_env", "rerun": "0"}, "1": {"status": "FAIL", "message": "E   KeyError: 'liquidity'\n       KeyError: 'liquidity'\n", "test_name": "test_model_save_load", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_preprocess_data", "rerun": "0"}, "3": {"status": "FAIL", "message": "E   KeyError: 'liquidity'\n       KeyError: 'liquidity'\n", "test_name": "test_train_and_predict", "rerun": "0"}}, "suite_name": "tests/test_ai_agent.py"}, "1": {"suite_name": "tests/test_ai_trader.py", "tests": {"0": {"status": "FAIL", "message": "   AttributeError: 'AITrader' object has no attribute 'execute_trade'\n", "test_name": "test_trade_execution", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_database_operations", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_nft_ownership", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_profit_distribution", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_governance_proposals", "rerun": "0"}}, "status": {"total_pass": 4, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}, "2": {"suite_name": "tests/test_blockchain_bridge.py", "tests": {"0": {"status": "ERROR", "message": "mock_web3 = <Mock id='1775333861968'>\nmock_contract = <Mock name='mock.eth.contract()' id='1775333861840'>\n\n    @pytest.fixture\n    def bridge(mock_web3, mock_contract):\n        \"\"\"Create a BlockchainBridge instance with mocked dependencies\"\"\"\n        with patch('json.load') as mock_load:\n            mock_load.return_value = {}\n            mock_web3.eth.contract.return_value = mock_contract\n>           return BlockchainBridge(\n                web3_provider='http://localhost:8545',\n                contract_address='0x1234',\n                private_key='0x5678',\n                contract_abi_path='fake_path.json'\n            )\n\ntests\\test_blockchain_bridge.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ai_agent.blockchain_bridge.BlockchainBridge object at 0x0000019D5A24E650>\nweb3_provider = 'http://localhost:8545', contract_address = '0x1234', private_key = '0x5678'\ncontract_abi_path = 'fake_path.json'\n\n    def __init__(\n        self,\n        web3_provider: str,\n        contract_address: str,\n        private_key: str,\n        contract_abi_path: str\n    ):\n        \"\"\"\n        Initialize blockchain connection and contract interface\n    \n        Args:\n            web3_provider: Web3 provider URL (e.g. Infura endpoint)\n            contract_address: Deployed StrategyNFT contract address\n            private_key: Private key for the owner account\n            contract_abi_path: Path to contract ABI JSON file\n        \"\"\"\n        self.w3 = Web3(Web3.HTTPProvider(web3_provider))\n    \n        # Load contract ABI\n>       with open(contract_abi_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'fake_path.json'\n\nai_agent\\blockchain_bridge.py:35: FileNotFoundError\n", "test_name": "test_create_strategy", "rerun": "0"}, "1": {"status": "ERROR", "message": "mock_web3 = <Mock id='1775330449936'>\nmock_contract = <Mock name='mock.eth.contract()' id='1775330445200'>\n\n    @pytest.fixture\n    def bridge(mock_web3, mock_contract):\n        \"\"\"Create a BlockchainBridge instance with mocked dependencies\"\"\"\n        with patch('json.load') as mock_load:\n            mock_load.return_value = {}\n            mock_web3.eth.contract.return_value = mock_contract\n>           return BlockchainBridge(\n                web3_provider='http://localhost:8545',\n                contract_address='0x1234',\n                private_key='0x5678',\n                contract_abi_path='fake_path.json'\n            )\n\ntests\\test_blockchain_bridge.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ai_agent.blockchain_bridge.BlockchainBridge object at 0x0000019D57DDF6D0>\nweb3_provider = 'http://localhost:8545', contract_address = '0x1234', private_key = '0x5678'\ncontract_abi_path = 'fake_path.json'\n\n    def __init__(\n        self,\n        web3_provider: str,\n        contract_address: str,\n        private_key: str,\n        contract_abi_path: str\n    ):\n        \"\"\"\n        Initialize blockchain connection and contract interface\n    \n        Args:\n            web3_provider: Web3 provider URL (e.g. Infura endpoint)\n            contract_address: Deployed StrategyNFT contract address\n            private_key: Private key for the owner account\n            contract_abi_path: Path to contract ABI JSON file\n        \"\"\"\n        self.w3 = Web3(Web3.HTTPProvider(web3_provider))\n    \n        # Load contract ABI\n>       with open(contract_abi_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'fake_path.json'\n\nai_agent\\blockchain_bridge.py:35: FileNotFoundError\n", "test_name": "test_mint_nft", "rerun": "0"}, "2": {"status": "ERROR", "message": "mock_web3 = <Mock id='1775333866896'>\nmock_contract = <Mock name='mock.eth.contract()' id='1775333857680'>\n\n    @pytest.fixture\n    def bridge(mock_web3, mock_contract):\n        \"\"\"Create a BlockchainBridge instance with mocked dependencies\"\"\"\n        with patch('json.load') as mock_load:\n            mock_load.return_value = {}\n            mock_web3.eth.contract.return_value = mock_contract\n>           return BlockchainBridge(\n                web3_provider='http://localhost:8545',\n                contract_address='0x1234',\n                private_key='0x5678',\n                contract_abi_path='fake_path.json'\n            )\n\ntests\\test_blockchain_bridge.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ai_agent.blockchain_bridge.BlockchainBridge object at 0x0000019D5A24DA90>\nweb3_provider = 'http://localhost:8545', contract_address = '0x1234', private_key = '0x5678'\ncontract_abi_path = 'fake_path.json'\n\n    def __init__(\n        self,\n        web3_provider: str,\n        contract_address: str,\n        private_key: str,\n        contract_abi_path: str\n    ):\n        \"\"\"\n        Initialize blockchain connection and contract interface\n    \n        Args:\n            web3_provider: Web3 provider URL (e.g. Infura endpoint)\n            contract_address: Deployed StrategyNFT contract address\n            private_key: Private key for the owner account\n            contract_abi_path: Path to contract ABI JSON file\n        \"\"\"\n        self.w3 = Web3(Web3.HTTPProvider(web3_provider))\n    \n        # Load contract ABI\n>       with open(contract_abi_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'fake_path.json'\n\nai_agent\\blockchain_bridge.py:35: FileNotFoundError\n", "test_name": "test_distribute_profits", "rerun": "0"}, "3": {"status": "ERROR", "message": "mock_web3 = <Mock id='1775197897552'>\nmock_contract = <Mock name='mock.eth.contract()' id='1775329151376'>\n\n    @pytest.fixture\n    def bridge(mock_web3, mock_contract):\n        \"\"\"Create a BlockchainBridge instance with mocked dependencies\"\"\"\n        with patch('json.load') as mock_load:\n            mock_load.return_value = {}\n            mock_web3.eth.contract.return_value = mock_contract\n>           return BlockchainBridge(\n                web3_provider='http://localhost:8545',\n                contract_address='0x1234',\n                private_key='0x5678',\n                contract_abi_path='fake_path.json'\n            )\n\ntests\\test_blockchain_bridge.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ai_agent.blockchain_bridge.BlockchainBridge object at 0x0000019D59DD4B90>\nweb3_provider = 'http://localhost:8545', contract_address = '0x1234', private_key = '0x5678'\ncontract_abi_path = 'fake_path.json'\n\n    def __init__(\n        self,\n        web3_provider: str,\n        contract_address: str,\n        private_key: str,\n        contract_abi_path: str\n    ):\n        \"\"\"\n        Initialize blockchain connection and contract interface\n    \n        Args:\n            web3_provider: Web3 provider URL (e.g. Infura endpoint)\n            contract_address: Deployed StrategyNFT contract address\n            private_key: Private key for the owner account\n            contract_abi_path: Path to contract ABI JSON file\n        \"\"\"\n        self.w3 = Web3(Web3.HTTPProvider(web3_provider))\n    \n        # Load contract ABI\n>       with open(contract_abi_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'fake_path.json'\n\nai_agent\\blockchain_bridge.py:35: FileNotFoundError\n", "test_name": "test_get_nft_data", "rerun": "0"}, "4": {"status": "ERROR", "message": "mock_web3 = <Mock id='1775302885968'>\nmock_contract = <Mock name='mock.eth.contract()' id='1775280151248'>\n\n    @pytest.fixture\n    def bridge(mock_web3, mock_contract):\n        \"\"\"Create a BlockchainBridge instance with mocked dependencies\"\"\"\n        with patch('json.load') as mock_load:\n            mock_load.return_value = {}\n            mock_web3.eth.contract.return_value = mock_contract\n>           return BlockchainBridge(\n                web3_provider='http://localhost:8545',\n                contract_address='0x1234',\n                private_key='0x5678',\n                contract_abi_path='fake_path.json'\n            )\n\ntests\\test_blockchain_bridge.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ai_agent.blockchain_bridge.BlockchainBridge object at 0x0000019D59B60C10>\nweb3_provider = 'http://localhost:8545', contract_address = '0x1234', private_key = '0x5678'\ncontract_abi_path = 'fake_path.json'\n\n    def __init__(\n        self,\n        web3_provider: str,\n        contract_address: str,\n        private_key: str,\n        contract_abi_path: str\n    ):\n        \"\"\"\n        Initialize blockchain connection and contract interface\n    \n        Args:\n            web3_provider: Web3 provider URL (e.g. Infura endpoint)\n            contract_address: Deployed StrategyNFT contract address\n            private_key: Private key for the owner account\n            contract_abi_path: Path to contract ABI JSON file\n        \"\"\"\n        self.w3 = Web3(Web3.HTTPProvider(web3_provider))\n    \n        # Load contract ABI\n>       with open(contract_abi_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'fake_path.json'\n\nai_agent\\blockchain_bridge.py:35: FileNotFoundError\n", "test_name": "test_get_strategy_data", "rerun": "0"}, "5": {"status": "ERROR", "message": "mock_web3 = <Mock id='1775329397776'>\nmock_contract = <Mock name='mock.eth.contract()' id='1775329399568'>\n\n    @pytest.fixture\n    def bridge(mock_web3, mock_contract):\n        \"\"\"Create a BlockchainBridge instance with mocked dependencies\"\"\"\n        with patch('json.load') as mock_load:\n            mock_load.return_value = {}\n            mock_web3.eth.contract.return_value = mock_contract\n>           return BlockchainBridge(\n                web3_provider='http://localhost:8545',\n                contract_address='0x1234',\n                private_key='0x5678',\n                contract_abi_path='fake_path.json'\n            )\n\ntests\\test_blockchain_bridge.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ai_agent.blockchain_bridge.BlockchainBridge object at 0x0000019D59E0D450>\nweb3_provider = 'http://localhost:8545', contract_address = '0x1234', private_key = '0x5678'\ncontract_abi_path = 'fake_path.json'\n\n    def __init__(\n        self,\n        web3_provider: str,\n        contract_address: str,\n        private_key: str,\n        contract_abi_path: str\n    ):\n        \"\"\"\n        Initialize blockchain connection and contract interface\n    \n        Args:\n            web3_provider: Web3 provider URL (e.g. Infura endpoint)\n            contract_address: Deployed StrategyNFT contract address\n            private_key: Private key for the owner account\n            contract_abi_path: Path to contract ABI JSON file\n        \"\"\"\n        self.w3 = Web3(Web3.HTTPProvider(web3_provider))\n    \n        # Load contract ABI\n>       with open(contract_abi_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'fake_path.json'\n\nai_agent\\blockchain_bridge.py:35: FileNotFoundError\n", "test_name": "test_error_handling", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 6}}, "3": {"suite_name": "tests/test_core_functions.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_run_trade_success", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_run_trade_failure", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_get_trade_history", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_get_market_price_available", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_get_market_price_unavailable", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_get_strategy_status", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_distribute_profits", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_get_holder_earnings", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_create_governance_proposal_success", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_create_governance_proposal_invalid", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_get_governance_proposals", "rerun": "0"}}, "status": {"total_pass": 11, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "4": {"suite_name": "tests/test_env.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_trading_env_action_space", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_trading_env_initialization", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_trading_env_observation_space", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AssertionError: 10.0 not less than 1e-06\n", "test_name": "test_trading_env_portfolio_value", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: (array([9.6941156e+02, 9.4378319e+05, 5.5620562e+05, 9.6941156e+02,\n          9.6941156e+02, 5.6157711e+01], dtype=float32), {}) is not an instance of <class 'numpy.ndarray'>\n", "test_name": "test_trading_env_reset", "rerun": "0"}, "5": {"status": "FAIL", "message": "   AssertionError: 0 not greater than 0\n", "test_name": "test_trading_env_step_buy", "rerun": "0"}, "6": {"status": "FAIL", "message": "   AssertionError: 0.0 == 0\n", "test_name": "test_trading_env_step_sell", "rerun": "0"}, "7": {"status": "FAIL", "message": "   AssertionError: 9.396292143644141 not less than 1e-06\n", "test_name": "test_trading_env_transaction_costs", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 5, "total_error": 0}}, "5": {"suite_name": "tests/test_market_maker.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_get_action", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AttributeError: 'NoneType' object has no attribute 'calculate_target_inventory'\n", "test_name": "test_get_inventory_metrics", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: 0 != 2\n", "test_name": "test_get_orders", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AttributeError: 'NoneType' object has no attribute 'calculate_target_inventory'\n", "test_name": "test_get_spreads", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: None is not an instance of <class 'ai_agent.strategies.pure_market_maker.PureMarketMaker'>\n", "test_name": "test_initialization", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_should_refresh_orders", "rerun": "0"}, "6": {"status": "FAIL", "message": "   AssertionError: ValueError not raised\n", "test_name": "test_uninitialized_state", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_update_market_state", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 5, "total_error": 0}}, "6": {"suite_name": "tests/test_market_maker_advanced.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_concurrent_operations", "rerun": "0"}, "1": {"status": "FAIL", "message": "   AttributeError: 'NoneType' object has no attribute 'calculate_target_inventory'\n", "test_name": "test_edge_cases", "rerun": "0"}, "2": {"status": "FAIL", "message": "       AssertionError: Exception not raised\n", "test_name": "test_error_handling", "rerun": "0"}, "3": {"status": "FAIL", "message": "       AssertionError: 0 != 2\n", "test_name": "test_market_conditions", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_performance", "rerun": "0"}}, "status": {"total_pass": 2, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 3, "total_error": 0}}, "7": {"suite_name": "tests/test_nft_agent.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_add_strategy", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_mint_nft", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_update_market_state", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_get_aggregated_orders", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_get_aggregated_action", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_distribute_profits", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_get_nft_performance", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_get_strategy_metrics", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_error_handling", "rerun": "0"}}, "status": {"total_pass": 9, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "8": {"suite_name": "tests/test_simulations.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_initialization", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_max_drawdown_calculation", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_portfolio_value_calculation", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_signal_generation", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_strategy_performance", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_trade_execution", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_report_generation", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_risk_metrics", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_trade_analysis", "rerun": "0"}}, "status": {"total_pass": 9, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "9": {"suite_name": "tests/test_strategy_nft.py", "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture\n    def contract_json():\n        \"\"\"Load contract JSON\"\"\"\n        contract_path = os.path.join(os.path.dirname(__file__), '..', 'contracts', 'StrategyNFT.json')\n>       with open(contract_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\..\\\\contracts\\\\StrategyNFT.json'\n\ntests\\test_strategy_nft.py:35: FileNotFoundError\n", "test_name": "test_create_strategy", "rerun": "0"}, "1": {"status": "ERROR", "message": "@pytest.fixture\n    def contract_json():\n        \"\"\"Load contract JSON\"\"\"\n        contract_path = os.path.join(os.path.dirname(__file__), '..', 'contracts', 'StrategyNFT.json')\n>       with open(contract_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\..\\\\contracts\\\\StrategyNFT.json'\n\ntests\\test_strategy_nft.py:35: FileNotFoundError\n", "test_name": "test_create_duplicate_strategy", "rerun": "0"}, "2": {"status": "ERROR", "message": "@pytest.fixture\n    def contract_json():\n        \"\"\"Load contract JSON\"\"\"\n        contract_path = os.path.join(os.path.dirname(__file__), '..', 'contracts', 'StrategyNFT.json')\n>       with open(contract_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\..\\\\contracts\\\\StrategyNFT.json'\n\ntests\\test_strategy_nft.py:35: FileNotFoundError\n", "test_name": "test_mint_nft", "rerun": "0"}, "3": {"status": "ERROR", "message": "@pytest.fixture\n    def contract_json():\n        \"\"\"Load contract JSON\"\"\"\n        contract_path = os.path.join(os.path.dirname(__file__), '..', 'contracts', 'StrategyNFT.json')\n>       with open(contract_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\..\\\\contracts\\\\StrategyNFT.json'\n\ntests\\test_strategy_nft.py:35: FileNotFoundError\n", "test_name": "test_mint_nft_invalid_strategy", "rerun": "0"}, "4": {"status": "ERROR", "message": "@pytest.fixture\n    def contract_json():\n        \"\"\"Load contract JSON\"\"\"\n        contract_path = os.path.join(os.path.dirname(__file__), '..', 'contracts', 'StrategyNFT.json')\n>       with open(contract_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\..\\\\contracts\\\\StrategyNFT.json'\n\ntests\\test_strategy_nft.py:35: FileNotFoundError\n", "test_name": "test_distribute_profits", "rerun": "0"}, "5": {"status": "ERROR", "message": "@pytest.fixture\n    def contract_json():\n        \"\"\"Load contract JSON\"\"\"\n        contract_path = os.path.join(os.path.dirname(__file__), '..', 'contracts', 'StrategyNFT.json')\n>       with open(contract_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\..\\\\contracts\\\\StrategyNFT.json'\n\ntests\\test_strategy_nft.py:35: FileNotFoundError\n", "test_name": "test_claim_profits", "rerun": "0"}, "6": {"status": "ERROR", "message": "@pytest.fixture\n    def contract_json():\n        \"\"\"Load contract JSON\"\"\"\n        contract_path = os.path.join(os.path.dirname(__file__), '..', 'contracts', 'StrategyNFT.json')\n>       with open(contract_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\..\\\\contracts\\\\StrategyNFT.json'\n\ntests\\test_strategy_nft.py:35: FileNotFoundError\n", "test_name": "test_claim_profits_unauthorized", "rerun": "0"}, "7": {"status": "ERROR", "message": "@pytest.fixture\n    def contract_json():\n        \"\"\"Load contract JSON\"\"\"\n        contract_path = os.path.join(os.path.dirname(__file__), '..', 'contracts', 'StrategyNFT.json')\n>       with open(contract_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\..\\\\contracts\\\\StrategyNFT.json'\n\ntests\\test_strategy_nft.py:35: FileNotFoundError\n", "test_name": "test_get_nft_data", "rerun": "0"}, "8": {"status": "ERROR", "message": "@pytest.fixture\n    def contract_json():\n        \"\"\"Load contract JSON\"\"\"\n        contract_path = os.path.join(os.path.dirname(__file__), '..', 'contracts', 'StrategyNFT.json')\n>       with open(contract_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\..\\\\contracts\\\\StrategyNFT.json'\n\ntests\\test_strategy_nft.py:35: FileNotFoundError\n", "test_name": "test_get_strategy_data", "rerun": "0"}, "9": {"status": "ERROR", "message": "@pytest.fixture\n    def contract_json():\n        \"\"\"Load contract JSON\"\"\"\n        contract_path = os.path.join(os.path.dirname(__file__), '..', 'contracts', 'StrategyNFT.json')\n>       with open(contract_path) as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\..\\\\contracts\\\\StrategyNFT.json'\n\ntests\\test_strategy_nft.py:35: FileNotFoundError\n", "test_name": "test_error_handling", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 10}}, "10": {"suite_name": "tests/test_trading_env.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_trading_env_initialization", "rerun": "0"}, "1": {"status": "FAIL", "message": "   assert 0 > 0\n    +  where 0 = <ai_agent.trading_env.CryptoTradingEnv object at 0x0000019D59E05510>.current_position\n", "test_name": "test_trading_env_step_buy", "rerun": "0"}, "2": {"status": "FAIL", "message": "   assert 0.0 != 0\n", "test_name": "test_trading_env_step_sell", "rerun": "0"}, "3": {"status": "FAIL", "message": "   AssertionError: assert False\n    +  where False = isinstance((array([9.2890948e+02, 1.0696388e+06, 5.0613353e+05,           nan,\\n                 nan, 5.6725739e+01], dtype=float32), {}), <class 'numpy.ndarray'>)\n    +    where <class 'numpy.ndarray'> = np.ndarray\n", "test_name": "test_trading_env_reset", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: assert not True\n    +  where True = <function any at 0x0000019D7F5498A0>(array([False, False, False,  True,  True, False]))\n    +    where <function any at 0x0000019D7F5498A0> = np.any\n    +    and   array([False, False, False,  True,  True, False]) = <ufunc 'isnan'>(array([1.0133563e+03, 8.4291238e+05, 5.0006028e+05,           nan,\\n                 nan, 4.0993793e+01], dtype=float32))\n    +      where <ufunc 'isnan'> = np.isnan\n", "test_name": "test_trading_env_observation_space", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_trading_env_action_space", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_trading_env_portfolio_value", "rerun": "0"}, "7": {"status": "FAIL", "message": "   assert 10.301488510681827 < 1e-06\n    +  where 10.301488510681827 = abs((0 - 10.301488510681827))\n    +    where 0 = <ai_agent.trading_env.CryptoTradingEnv object at 0x0000019D59E10710>.current_position\n", "test_name": "test_trading_env_transaction_costs", "rerun": "0"}}, "status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 5, "total_error": 0}}, "11": {"suite_name": "tests/test_uniswap.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_calculate_min_amount_out", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_execute_swap", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_get_pool_data", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_get_token_price", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: 0 not greater than 0\n", "test_name": "test_integration_with_trading_env", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_swap_gas_estimation", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_swap_slippage_protection", "rerun": "0"}}, "status": {"total_pass": 6, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}, "12": {"suite_name": "tests/test_uniswap_client.py", "tests": {"0": {"status": "FAIL", "message": "   assert False\n    +  where False = <bound method Web3.is_connected of <web3.main.Web3 object at 0x0000019D5A180810>>()\n    +    where <bound method Web3.is_connected of <web3.main.Web3 object at 0x0000019D5A180810>> = <web3.main.Web3 object at 0x0000019D5A180810>.is_connected\n    +      where <web3.main.Web3 object at 0x0000019D5A180810> = <ai_agent.uniswap_client.UniswapV3Client object at 0x0000019D5A181D50>.w3\n", "test_name": "test_initialization", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_get_token_price", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_calculate_min_amount_out", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_get_pool_data", "rerun": "0"}, "4": {"status": "SKIP", "message": "('C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\test_uniswap_client.py', 63, \"Skipped: Gas estimation failed: Gas estimation failed: HTTPConnectionPool(host='127.0.0.1', port=8545): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000019D59E2EC90>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))\")", "test_name": "test_estimate_gas", "rerun": "0"}, "5": {"status": "SKIP", "message": "('C:\\\\GEHC_Projects\\\\experiment\\\\marketmint\\\\tests\\\\test_uniswap_client.py', 71, \"Skipped: Allowance check failed: Failed to check allowance: HTTPConnectionPool(host='127.0.0.1', port=8545): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000019D5A254250>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))\")", "test_name": "test_check_allowance", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_execute_swap_validation", "rerun": "0"}}, "status": {"total_pass": 4, "total_skip": 2, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}}}, "date": "March 25, 2025", "start_time": 1742935564.6958811, "total_suite": 13, "status": "FAIL", "status_list": {"pass": "56", "fail": "23", "skip": "2", "error": "16", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "97"}